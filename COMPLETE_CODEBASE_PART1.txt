NEATSPLIT PROJECT - COMPLETE CODEBASE (PART 1 OF 3)
===================================================

PROJECT OVERVIEW:
================
NeatSplit is a .NET MAUI group expense splitting application targeting .NET 8 with MacCatalyst.
The project uses MVVM architecture, SQLite for local storage, Dependency Injection, and local notifications.

PROJECT STRUCTURE:
=================
- Main App (neatsplit.csproj): MAUI application with UI
- Core Library (NeatSplit.Core): Business logic and models
- Models: Data entities for the application
- Views: XAML UI pages
- ViewModels: MVVM pattern implementation
- Services: Database and business services

TECHNOLOGY STACK:
=================
- .NET 8
- .NET MAUI (Multi-platform App UI)
- SQLite for local database
- MVVM Architecture Pattern
- Dependency Injection
- CommunityToolkit.Maui

BUILD STATUS:
=============
- NeatSplit.Core: ✅ Builds successfully (warnings about nullable properties)
- Main App: ❌ Fails due to missing MAUI workloads
- Issue: NETSDK1139 - Target platform identifiers not recognized

================================================================================
1. PROJECT CONFIGURATION FILES
================================================================================

1.1 MAIN PROJECT FILE (neatsplit.csproj)
========================================
<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0-maccatalyst</TargetFrameworks>
		<!-- Note: Originally had net8.0-android;net8.0-ios;net8.0-maccatalyst -->
		<!-- Modified to only target MacCatalyst due to missing MAUI workloads -->

		<OutputType>Exe</OutputType>
		<RootNamespace>NeatSplit</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<!-- Display name -->
		<ApplicationTitle>neatsplit</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>com.companyname.neatsplit</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<!-- Windows Package Type -->
		<WindowsPackageType>None</WindowsPackageType>

		<!-- Platform-specific version requirements -->
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">15.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
	</PropertyGroup>

	<!-- Disable assembly info generation for MacCatalyst to avoid CS0579 errors -->
	<PropertyGroup Condition="'$(TargetFramework)'=='net8.0-maccatalyst'">
		<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<!-- NuGet Package Dependencies -->
		<PackageReference Include="CommunityToolkit.Maui" Version="8.0.0" />
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.0" />
		<PackageReference Include="sqlite-net-pcl" Version="1.9.172" />
	</ItemGroup>

	<ItemGroup>
		<!-- Project References -->
		<ProjectReference Include="NeatSplit.Core\NeatSplit.Core.csproj" />
	</ItemGroup>

</Project>

1.2 CORE LIBRARY PROJECT FILE (NeatSplit.Core/NeatSplit.Core.csproj)
====================================================================
<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="sqlite-net-pcl" Version="1.9.172" />
	</ItemGroup>

</Project>

================================================================================
2. CORE LIBRARY - BUSINESS LOGIC AND MODELS
================================================================================

2.1 BALANCE CALCULATOR (NeatSplit.Core/BalanceCalculator.cs)
============================================================
// This class contains the core business logic for calculating expense balances
// between group members. It implements the algorithm to determine who owes what
// to whom after all expenses are considered.

using NeatSplit.Models;

namespace NeatSplit.Core
{
    public class BalanceCalculator
    {
        /// <summary>
        /// Calculates the balance for each member in a group based on their expenses
        /// </summary>
        /// <param name="group">The group containing members and expenses</param>
        /// <returns>List of balance results showing who owes what to whom</returns>
        public List<BalanceResult> CalculateBalances(Group group)
        {
            var balances = new List<BalanceResult>();
            
            // Calculate total amount each member has paid
            var memberTotals = new Dictionary<int, decimal>();
            foreach (var member in group.Members)
            {
                memberTotals[member.Id] = 0;
            }

            // Sum up all expenses for each member
            foreach (var expense in group.Expenses)
            {
                if (memberTotals.ContainsKey(expense.PaidByMemberId))
                {
                    memberTotals[expense.PaidByMemberId] += expense.TotalAmount;
                }
            }

            // Calculate the average amount per member
            decimal totalAmount = memberTotals.Values.Sum();
            decimal averageAmount = totalAmount / group.Members.Count;

            // Calculate who owes what
            var debts = new List<(int memberId, decimal amount)>();
            var credits = new List<(int memberId, decimal amount)>();

            foreach (var member in group.Members)
            {
                decimal memberTotal = memberTotals[member.Id];
                decimal difference = memberTotal - averageAmount;

                if (difference > 0)
                {
                    credits.Add((member.Id, difference));
                }
                else if (difference < 0)
                {
                    debts.Add((member.Id, Math.Abs(difference)));
                }
            }

            // Match debts with credits to create balance results
            foreach (var debt in debts)
            {
                decimal remainingDebt = debt.amount;
                
                foreach (var credit in credits.Where(c => c.amount > 0))
                {
                    if (remainingDebt <= 0) break;

                    decimal transferAmount = Math.Min(remainingDebt, credit.amount);
                    
                    var fromMember = group.Members.First(m => m.Id == debt.memberId);
                    var toMember = group.Members.First(m => m.Id == credit.memberId);
                    
                    balances.Add(new BalanceResult
                    {
                        From = fromMember.Name,
                        To = toMember.Name,
                        Amount = transferAmount
                    });

                    remainingDebt -= transferAmount;
                }
            }

            return balances;
        }
    }
}

2.2 GROUP MODEL (NeatSplit.Core/Models/Group.cs)
================================================
// Represents a group of people who share expenses
// Contains members and their associated expenses

using SQLite;

namespace NeatSplit.Models
{
    [Table("Groups")]
    public class Group
    {
        [PrimaryKey, AutoIncrement]
        public int Id { get; set; }
        
        [MaxLength(100)]
        public string Name { get; set; } = string.Empty;
        
        [MaxLength(500)]
        public string Description { get; set; } = string.Empty;
        
        public DateTime CreatedDate { get; set; } = DateTime.Now;
        
        // Navigation properties (not stored in SQLite)
        [Ignore]
        public List<Member> Members { get; set; } = new();
        
        [Ignore]
        public List<Expense> Expenses { get; set; } = new();
    }
}

2.3 MEMBER MODEL (NeatSplit.Core/Models/Member.cs)
==================================================
// Represents a member of a group who can participate in expenses

using SQLite;

namespace NeatSplit.Models
{
    [Table("Members")]
    public class Member
    {
        [PrimaryKey, AutoIncrement]
        public int Id { get; set; }
        
        [MaxLength(100)]
        public string Name { get; set; } = string.Empty;
        
        [MaxLength(200)]
        public string Email { get; set; } = string.Empty;
        
        public int GroupId { get; set; }
        
        public DateTime CreatedDate { get; set; } = DateTime.Now;
    }
}

2.4 EXPENSE MODEL (NeatSplit.Core/Models/Expense.cs)
====================================================
// Represents an expense that was paid by a member
// Contains the total amount and individual expense items

using SQLite;

namespace NeatSplit.Models
{
    [Table("Expenses")]
    public class Expense
    {
        [PrimaryKey, AutoIncrement]
        public int Id { get; set; }
        
        [MaxLength(200)]
        public string Description { get; set; } = string.Empty;
        
        public decimal TotalAmount { get; set; }
        
        public int PaidByMemberId { get; set; }
        
        public int GroupId { get; set; }
        
        public DateTime ExpenseDate { get; set; } = DateTime.Now;
        
        public DateTime CreatedDate { get; set; } = DateTime.Now;
        
        // Navigation properties
        [Ignore]
        public List<ExpenseItem> Items { get; set; } = new();
    }
}

2.5 EXPENSE ITEM MODEL (NeatSplit.Core/Models/ExpenseItem.cs)
=============================================================
// Represents individual items within an expense
// Each item can be shared among multiple participants

using SQLite;

namespace NeatSplit.Models
{
    [Table("ExpenseItems")]
    public class ExpenseItem
    {
        [PrimaryKey, AutoIncrement]
        public int Id { get; set; }
        
        [MaxLength(200)]
        public string Description { get; set; } = string.Empty;
        
        public decimal Amount { get; set; }
        
        public int ExpenseId { get; set; }
        
        public DateTime CreatedDate { get; set; } = DateTime.Now;
        
        // Navigation properties
        [Ignore]
        public List<ExpenseItemParticipant> Participants { get; set; } = new();
    }
}

2.6 EXPENSE ITEM PARTICIPANT MODEL (NeatSplit.Core/Models/ExpenseItemParticipant.cs)
===================================================================================
// Represents which members are participating in a specific expense item
// Links members to expense items with their share amount

using SQLite;

namespace NeatSplit.Models
{
    [Table("ExpenseItemParticipants")]
    public class ExpenseItemParticipant
    {
        [PrimaryKey, AutoIncrement]
        public int Id { get; set; }
        
        public int ExpenseItemId { get; set; }
        
        public int MemberId { get; set; }
        
        public decimal ShareAmount { get; set; }
        
        public DateTime CreatedDate { get; set; } = DateTime.Now;
    }
}

2.7 BALANCE RESULT MODEL (NeatSplit.Core/Models/BalanceResult.cs)
=================================================================
// Represents the result of balance calculations
// Shows who owes what amount to whom

namespace NeatSplit.Models
{
    public class BalanceResult
    {
        public string From { get; set; } = string.Empty;
        public string To { get; set; } = string.Empty;
        public decimal Amount { get; set; }
    }
}

================================================================================
3. MAIN APPLICATION - SERVICES
================================================================================

3.1 DATABASE SERVICE (Services/NeatSplitDatabase.cs)
===================================================
// SQLite database service for managing all data operations
// Handles CRUD operations for groups, members, expenses, and related entities

using SQLite;
using NeatSplit.Models;

namespace NeatSplit.Services
{
    public class NeatSplitDatabase
    {
        private readonly SQLiteAsyncConnection _database;

        public NeatSplitDatabase()
        {
            var dbPath = Path.Combine(FileSystem.AppDataDirectory, "neatsplit.db3");
            _database = new SQLiteAsyncConnection(dbPath);
            
            // Create tables
            _database.CreateTableAsync<Group>().Wait();
            _database.CreateTableAsync<Member>().Wait();
            _database.CreateTableAsync<Expense>().Wait();
            _database.CreateTableAsync<ExpenseItem>().Wait();
            _database.CreateTableAsync<ExpenseItemParticipant>().Wait();
        }

        // Group operations
        public async Task<List<Group>> GetGroupsAsync()
        {
            return await _database.Table<Group>().ToListAsync();
        }

        public async Task<Group> GetGroupAsync(int id)
        {
            return await _database.Table<Group>().Where(g => g.Id == id).FirstOrDefaultAsync();
        }

        public async Task<int> SaveGroupAsync(Group group)
        {
            if (group.Id != 0)
            {
                return await _database.UpdateAsync(group);
            }
            else
            {
                return await _database.InsertAsync(group);
            }
        }

        public async Task<int> DeleteGroupAsync(Group group)
        {
            return await _database.DeleteAsync(group);
        }

        // Member operations
        public async Task<List<Member>> GetMembersAsync(int groupId)
        {
            return await _database.Table<Member>().Where(m => m.GroupId == groupId).ToListAsync();
        }

        public async Task<Member> GetMemberAsync(int id)
        {
            return await _database.Table<Member>().Where(m => m.Id == id).FirstOrDefaultAsync();
        }

        public async Task<int> SaveMemberAsync(Member member)
        {
            if (member.Id != 0)
            {
                return await _database.UpdateAsync(member);
            }
            else
            {
                return await _database.InsertAsync(member);
            }
        }

        public async Task<int> DeleteMemberAsync(Member member)
        {
            return await _database.DeleteAsync(member);
        }

        // Expense operations
        public async Task<List<Expense>> GetExpensesAsync(int groupId)
        {
            return await _database.Table<Expense>().Where(e => e.GroupId == groupId).ToListAsync();
        }

        public async Task<Expense> GetExpenseAsync(int id)
        {
            return await _database.Table<Expense>().Where(e => e.Id == id).FirstOrDefaultAsync();
        }

        public async Task<int> SaveExpenseAsync(Expense expense)
        {
            if (expense.Id != 0)
            {
                return await _database.UpdateAsync(expense);
            }
            else
            {
                return await _database.InsertAsync(expense);
            }
        }

        public async Task<int> DeleteExpenseAsync(Expense expense)
        {
            return await _database.DeleteAsync(expense);
        }

        // Expense item operations
        public async Task<List<ExpenseItem>> GetExpenseItemsAsync(int expenseId)
        {
            return await _database.Table<ExpenseItem>().Where(ei => ei.ExpenseId == expenseId).ToListAsync();
        }

        public async Task<int> SaveExpenseItemAsync(ExpenseItem item)
        {
            if (item.Id != 0)
            {
                return await _database.UpdateAsync(item);
            }
            else
            {
                return await _database.InsertAsync(item);
            }
        }

        // Expense item participant operations
        public async Task<List<ExpenseItemParticipant>> GetExpenseItemParticipantsAsync(int expenseItemId)
        {
            return await _database.Table<ExpenseItemParticipant>().Where(p => p.ExpenseItemId == expenseItemId).ToListAsync();
        }

        public async Task<int> SaveExpenseItemParticipantAsync(ExpenseItemParticipant participant)
        {
            if (participant.Id != 0)
            {
                return await _database.UpdateAsync(participant);
            }
            else
            {
                return await _database.InsertAsync(participant);
            }
        }
    }
}

================================================================================
END OF PART 1
================================================================================

This is Part 1 of 3 of the complete NeatSplit codebase.
Part 2 will contain all ViewModels and application entry points.
Part 3 will contain all XAML UI files and styling resources. 