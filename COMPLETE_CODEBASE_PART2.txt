NEATSPLIT PROJECT - COMPLETE CODEBASE (PART 2 OF 3)
===================================================

================================================================================
4. MAIN APPLICATION - VIEWMODELS (MVVM PATTERN)
================================================================================

4.1 BASE VIEWMODEL (ViewModels/BaseViewModel.cs)
===============================================
// Base class for all ViewModels implementing INotifyPropertyChanged
// Provides common functionality for property change notifications

using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace NeatSplit.ViewModels
{
    public abstract class BaseViewModel : INotifyPropertyChanged
    {
        private bool _isBusy;
        private string _title = string.Empty;

        public bool IsBusy
        {
            get => _isBusy;
            set => SetProperty(ref _isBusy, value);
        }

        public string Title
        {
            get => _title;
            set => SetProperty(ref _title, value);
        }

        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string? propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(storage, value))
                return false;

            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }
}

4.2 HOME PAGE VIEWMODEL (ViewModels/HomePageViewModel.cs)
========================================================
// ViewModel for the main home page showing groups and navigation

using NeatSplit.Models;
using NeatSplit.Services;

namespace NeatSplit.ViewModels
{
    public class HomePageViewModel : BaseViewModel
    {
        private readonly NeatSplitDatabase _database;
        private List<GroupDisplay> _groups = new();

        public HomePageViewModel(NeatSplitDatabase database)
        {
            _database = database;
            Title = "NeatSplit";
        }

        public List<GroupDisplay> Groups
        {
            get => _groups;
            set => SetProperty(ref _groups, value);
        }

        public async Task LoadGroupsAsync()
        {
            if (IsBusy) return;

            IsBusy = true;
            try
            {
                var dbGroups = await _database.GetGroupsAsync();
                var groupDisplays = new List<GroupDisplay>();

                foreach (var group in dbGroups)
                {
                    var members = await _database.GetMembersAsync(group.Id);
                    var expenses = await _database.GetExpensesAsync(group.Id);
                    
                    groupDisplays.Add(new GroupDisplay
                    {
                        Id = group.Id,
                        Name = group.Name,
                        MemberCount = members.Count,
                        TotalExpenses = expenses.Sum(e => e.TotalAmount)
                    });
                }

                Groups = groupDisplays;
            }
            catch (Exception ex)
            {
                // Handle error
                await Application.Current.MainPage.DisplayAlert("Error", ex.Message, "OK");
            }
            finally
            {
                IsBusy = false;
            }
        }
    }

    // Display model for groups in the home page
    public class GroupDisplay
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int MemberCount { get; set; }
        public decimal TotalExpenses { get; set; }
    }
}

4.3 MEMBERS TAB VIEWMODEL (ViewModels/MembersTabViewModel.cs)
============================================================
// ViewModel for managing group members

using NeatSplit.Models;
using NeatSplit.Services;

namespace NeatSplit.ViewModels
{
    public class MembersTabViewModel : BaseViewModel
    {
        private readonly NeatSplitDatabase _database;
        private List<MemberDisplay> _members = new();
        private int _groupId;

        public MembersTabViewModel(NeatSplitDatabase database, int groupId)
        {
            _database = database;
            _groupId = groupId;
            Title = "Members";
        }

        public List<MemberDisplay> Members
        {
            get => _members;
            set => SetProperty(ref _members, value);
        }

        public async Task LoadMembersAsync()
        {
            if (IsBusy) return;

            IsBusy = true;
            try
            {
                var dbMembers = await _database.GetMembersAsync(_groupId);
                var memberDisplays = dbMembers.Select(m => new MemberDisplay
                {
                    Id = m.Id,
                    Name = m.Name,
                    CreatedAt = m.CreatedDate
                }).ToList();

                Members = memberDisplays;
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", ex.Message, "OK");
            }
            finally
            {
                IsBusy = false;
            }
        }

        public async Task<bool> AddMemberAsync(string name)
        {
            try
            {
                var member = new Member
                {
                    Name = name,
                    GroupId = _groupId,
                    CreatedDate = DateTime.Now
                };

                await _database.SaveMemberAsync(member);
                await LoadMembersAsync();
                return true;
            }
            catch
            {
                return false;
            }
        }
    }

    // Display model for members
    public class MemberDisplay
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }
}

4.4 EXPENSES TAB VIEWMODEL (ViewModels/ExpensesTabViewModel.cs)
==============================================================
// ViewModel for managing group expenses

using NeatSplit.Models;
using NeatSplit.Services;

namespace NeatSplit.ViewModels
{
    public class ExpensesTabViewModel : BaseViewModel
    {
        private readonly NeatSplitDatabase _database;
        private List<ExpenseDisplay> _expenses = new();
        private int _groupId;

        public ExpensesTabViewModel(NeatSplitDatabase database, int groupId)
        {
            _database = database;
            _groupId = groupId;
            Title = "Expenses";
        }

        public List<ExpenseDisplay> Expenses
        {
            get => _expenses;
            set => SetProperty(ref _expenses, value);
        }

        public async Task LoadExpensesAsync()
        {
            if (IsBusy) return;

            IsBusy = true;
            try
            {
                var dbExpenses = await _database.GetExpensesAsync(_groupId);
                var expenseDisplays = new List<ExpenseDisplay>();

                foreach (var expense in dbExpenses)
                {
                    var payer = await _database.GetMemberAsync(expense.PaidByMemberId);
                    expenseDisplays.Add(new ExpenseDisplay
                    {
                        Id = expense.Id,
                        Description = expense.Description,
                        TotalAmount = expense.TotalAmount,
                        PayerName = payer?.Name ?? "Unknown",
                        ExpenseDate = expense.ExpenseDate
                    });
                }

                Expenses = expenseDisplays;
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", ex.Message, "OK");
            }
            finally
            {
                IsBusy = false;
            }
        }
    }

    // Display model for expenses
    public class ExpenseDisplay
    {
        public int Id { get; set; }
        public string Description { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
        public string PayerName { get; set; } = string.Empty;
        public DateTime ExpenseDate { get; set; }
    }
}

4.5 BALANCES TAB VIEWMODEL (ViewModels/BalancesTabViewModel.cs)
==============================================================
// ViewModel for displaying calculated balances between members

using NeatSplit.Models;
using NeatSplit.Services;
using NeatSplit.Core;

namespace NeatSplit.ViewModels
{
    public class BalancesTabViewModel : BaseViewModel
    {
        private readonly NeatSplitDatabase _database;
        private readonly BalanceCalculator _balanceCalculator;
        private List<BalanceDisplay> _balances = new();
        private int _groupId;

        public BalancesTabViewModel(NeatSplitDatabase database, int groupId)
        {
            _database = database;
            _groupId = groupId;
            _balanceCalculator = new BalanceCalculator();
            Title = "Balances";
        }

        public List<BalanceDisplay> Balances
        {
            get => _balances;
            set => SetProperty(ref _balances, value);
        }

        public async Task CalculateBalancesAsync()
        {
            if (IsBusy) return;

            IsBusy = true;
            try
            {
                // Load complete group data
                var group = await _database.GetGroupAsync(_groupId);
                if (group == null) return;

                group.Members = await _database.GetMembersAsync(_groupId);
                group.Expenses = await _database.GetExpensesAsync(_groupId);
                
                // Load expense items and participants for each expense
                foreach (var expense in group.Expenses)
                {
                    expense.Items = await _database.GetExpenseItemsAsync(expense.Id);
                    
                    foreach (var item in expense.Items)
                    {
                        item.Participants = await _database.GetExpenseItemParticipantsAsync(item.Id);
                    }
                }

                // Calculate balances
                var balanceResults = _balanceCalculator.CalculateBalances(group);
                
                var balanceDisplays = balanceResults.Select(b => new BalanceDisplay
                {
                    Display = $"{b.From} owes {b.To} ${b.Amount:F2}"
                }).ToList();

                Balances = balanceDisplays;
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", ex.Message, "OK");
            }
            finally
            {
                IsBusy = false;
            }
        }
    }

    // Display model for balances
    public class BalanceDisplay
    {
        public string Display { get; set; } = string.Empty;
    }
}

4.6 ADD EXPENSE PAGE VIEWMODEL (ViewModels/AddExpensePageViewModel.cs)
=====================================================================
// ViewModel for adding new expenses to a group

using NeatSplit.Models;
using NeatSplit.Services;

namespace NeatSplit.ViewModels
{
    public class AddExpensePageViewModel : BaseViewModel
    {
        private readonly NeatSplitDatabase _database;
        private string _description = string.Empty;
        private decimal _amount;
        private Member _selectedMember;
        private List<Member> _members = new();
        private int _groupId;

        public AddExpensePageViewModel(NeatSplitDatabase database, int groupId)
        {
            _database = database;
            _groupId = groupId;
            Title = "Add Expense";
        }

        public string Description
        {
            get => _description;
            set => SetProperty(ref _description, value);
        }

        public decimal Amount
        {
            get => _amount;
            set => SetProperty(ref _amount, value);
        }

        public Member SelectedMember
        {
            get => _selectedMember;
            set => SetProperty(ref _selectedMember, value);
        }

        public List<Member> Members
        {
            get => _members;
            set => SetProperty(ref _members, value);
        }

        public async Task LoadMembersAsync()
        {
            try
            {
                Members = await _database.GetMembersAsync(_groupId);
                if (Members.Any())
                {
                    SelectedMember = Members.First();
                }
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", ex.Message, "OK");
            }
        }

        public async Task<bool> SaveExpenseAsync()
        {
            if (IsBusy || SelectedMember == null) return false;

            if (string.IsNullOrWhiteSpace(Description))
            {
                await Application.Current.MainPage.DisplayAlert("Error", "Please enter a description", "OK");
                return false;
            }

            if (Amount <= 0)
            {
                await Application.Current.MainPage.DisplayAlert("Error", "Please enter a valid amount", "OK");
                return false;
            }

            IsBusy = true;
            try
            {
                var expense = new Expense
                {
                    Description = Description,
                    TotalAmount = Amount,
                    PaidByMemberId = SelectedMember.Id,
                    GroupId = _groupId,
                    ExpenseDate = DateTime.Now
                };

                await _database.SaveExpenseAsync(expense);
                return true;
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", ex.Message, "OK");
                return false;
            }
            finally
            {
                IsBusy = false;
            }
        }
    }
}

================================================================================
5. MAIN APPLICATION - APPLICATION ENTRY POINTS
================================================================================

5.1 MAUI PROGRAM (MauiProgram.cs)
=================================
// Application entry point and dependency injection setup
// Configures services, ViewModels, and Views

using Microsoft.Extensions.Logging;
using NeatSplit.Services;
using NeatSplit.ViewModels;
using NeatSplit.Views;

namespace NeatSplit
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .UseMauiCommunityToolkit()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });

            // Register services
            builder.Services.AddSingleton<NeatSplitDatabase>();

            // Register ViewModels
            builder.Services.AddTransient<HomePageViewModel>();
            builder.Services.AddTransient<MembersTabViewModel>();
            builder.Services.AddTransient<ExpensesTabViewModel>();
            builder.Services.AddTransient<BalancesTabViewModel>();
            builder.Services.AddTransient<AddExpensePageViewModel>();

            // Register Views
            builder.Services.AddTransient<HomePage>();
            builder.Services.AddTransient<MembersTab>();
            builder.Services.AddTransient<ExpensesTab>();
            builder.Services.AddTransient<BalancesTab>();
            builder.Services.AddTransient<AddExpensePage>();

#if DEBUG
            builder.Logging.AddDebug();
#endif

            return builder.Build();
        }
    }
}

5.2 MAIN APP CLASS (App.xaml.cs)
================================
// Main application class handling application lifecycle

namespace NeatSplit
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();
            MainPage = new AppShell();
        }
    }
}

5.3 APP SHELL (AppShell.xaml.cs)
================================
// Shell navigation container for the application

namespace NeatSplit
{
    public partial class AppShell : Shell
    {
        public AppShell()
        {
            InitializeComponent();
        }
    }
}

================================================================================
END OF PART 2
================================================================================

This is Part 2 of 3 of the complete NeatSplit codebase.
Part 1 contained project configuration and core library.
Part 3 will contain all XAML UI files and styling resources. 